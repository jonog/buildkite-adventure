#!/usr/bin/env ruby

require 'open3'
require 'yaml'
require 'file/temp'

class Page
  attr_reader :name, :actions

  def self.find(name)
    # Do we even have a page?
    if Dir.exist?("pages/#{name}")
      # Load the meta data for the page
      metadata = YAML.load_file("pages/#{name}/metadata.yml")

      # Do we even have any metadata?
      if metadata
        # Convert the array of actions into a key/value hash for easier lookup
        actions = metadata["actions"].inject({}) do |hash, action|
          hash[action["text"]] = action["goto"]
          hash
        end
      else
        actions = {}
      end

      new(name, actions)
    else
      raise "No page exists with name `#{name}`"
    end
  end

  def initialize(name, actions)
    @name = name
    @actions = actions
  end

  def to_buildkite_pipeline
    {
      "steps" => [
        {
          "block" => ":point_right:",
          "fields" => [ { "select" => "What would you like to do?", "key" => "decision", "options" => @actions.keys } ]
        },
        {
          "command" => "adventure",
          "label" => ":book:"
        }
      ]
    }
  end
end

# Get the previous decision and page
last_decision, last_decision_error, last_decision_status = Open3.capture3("buildkite-agent", "meta-data", "get", "decision")
last_page_name, last_page_error, last_page_status = Open3.capture3("buildkite-agent", "meta-data", "get", "page")

# Figure out the current page, either based on the previous decision, or
# default to the first one.
page = if not last_page_name.empty?
         last_page = Page.find(last_page_name)
         goto = last_page.actions[last_decision]
         Page.find(goto)
       else
         Page.find("welcome")
       end

# Upload any images from the page as artifacts
artifact_upload_output, artifact_upload_error, artifact_upload_status = Open3.capture3("buildkite-agent", "artifact", "upload", "*.jpg")

puts "+++ :book: Adventure..."

# Show the page of the adventure
puts `pages/#{page.name}/render.sh`

# Set meta data to store what page we're on
Open3.capture3("buildkite-agent", "meta-data", "set", "page", page.name)

# Upload new steps to BK to continue the adventure
upload_input = page.to_buildkite_pipeline.to_yaml
upload_output, upload_error, upload_status = Open3.capture3("buildkite-agent", "pipeline", "upload", stdin_data: upload_input)
unless upload_status.success?
  puts "--- :warning: Failed to upload the next pipeline"
  puts "This was the pipeline..."
  puts upload_input
  puts ""
  puts "And this was the error..."
  puts upload_error
end
